2013-08-18:
	- Added PartialSelect<TDestination>() (PartialSelection<TSource, TDestination>, ExpressionHelper.Combine<TSource, TDestination>(params Expression<Func<TSource, TDestination>>[] expressions);

2013-08-18:
	- Finished new syntax. Works wonders. A lot of breaking changes though:
		- Joins (new syntax): 
			- Instead of having .(Inner|LeftOuter|RightOuter|Full)Join() methods on the FlowQuery object you now only have four properties (Inner, LeftOuter, RightOuter, Full) where you get the Join() methods overloads
			- Overloads for specifying extra withClause/joinOnClause/withCriterion now uses Func<bool> instead of Func<TAlias, bool>.
		- OrderBy (new syntax)
			- Instead of having OrderBy() methods on the FlowQuery object you now have two properties (Order, Then) where you get methods for .By(), .ByDescending(), otherwise it's the same
		- You can no longer go to an ICriteria/DetachedCriteria object and go back to a FlowQuery object, since the underlying structure has been entirely re-written, read more below.
	- Removed old syntax
	- Updated test suite to use new syntax
	- Underlying query structure has been entirely re-written to make queries re-usable and morphable (the same query can be used as both a detached query and a root query, and it can also be re-used multiple times with different projections).
		- By using the .Immediate()/.Delayed()/.Detached() you determine the type of result expected from the query
			- Immediate() gives an instant result like previous version of FlowQuery have done.
			- Delayed() uses NHibernate's Futures/MultiCriteria and delays the queries until a value is requested.
			. Detached() results in a subquery / DetachedCriteria
	- Made sure no order by statements are included in subqueries when unnecessary (e.g. no skip and no take) to avoid unwanted/unexpected crashes due to re-use of a query

2013-08-17:
	- Renamed Futures symbols to Delayed for clarity.
	- Changed target platform to .NET 4.0
	- Implemented DelayedCount() methods using Lazy<T> construct
	- Modified Join API to use optionals (to reduce the number of method overloads and increase maintainability).
	- Refactored out Count() methods to a separate partial class for FlowQueryImpl.


	- Started bulding on a new syntax which combines detached criterias with regular criterias to reduce duplicating code.
		Got stuck with SelectSetup due to really complex generics and generic constraints. I may have to rethink.

2013-08-14:
	- Modified constructors for FlowQueryImpl to support IStatelessSession as well as ISession
	- Added extension methods to IStatelessSession to create FlowQuery queries
	- Added support for Futures (MultiCriteria) for most of the Select/Querying methods
	- Added new tests (and modified old ones) to verify the changes and new features